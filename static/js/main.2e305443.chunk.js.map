{"version":3,"sources":["components/title.js","components/tasks.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","aria-label","role","Tasks","props","valuee","onClick","handleDelete","id","App","handleTaskChange","e","setState","newTask","target","value","handleSubmit","preventDefault","newTasks","state","tasks","push","splice","onSubmit","this","type","onChange","map","task","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQASeA,MAPd,WACG,OACI,6BACI,wBAAIC,UAAU,SAAd,mBAAsC,0BAAMC,aAAW,QAAQC,KAAK,OAA9B,gBAAtC,OCaGC,MAhBf,SAAeC,GACX,OAEI,yBAAKJ,UAAU,kBACX,wBAAIA,UAAU,QAAQI,EAAMC,QAC5B,yBAAKL,UAAU,oBACZ,4BACGM,QAAS,WAAOF,EAAMG,aAAaH,EAAMI,KACzCR,UAAU,iBAFb,QCgDAS,E,kDAjDb,aAAc,IAAD,8BACX,gBAOFC,iBAAiB,SAACC,GAChB,EAAKC,SAAS,CACZC,QAAQF,EAAEG,OAAOC,SAVR,EAabC,aAAa,SAACL,GACZA,EAAEM,iBACF,IAAIC,EAAW,EAAKC,MAAMC,MAC1BF,EAASG,KAAK,EAAKF,MAAMN,SACzB,EAAKD,SAAS,CACZC,QAAS,GACTO,MAAOF,KAnBE,EAsBbX,aAAe,SAACC,GACd,IAAIU,EAAW,EAAKC,MAAMC,MAC1BF,EAASI,OAAOd,EAAI,GACpB,EAAKI,SAAS,CACZQ,MAAOF,KAvBT,EAAKC,MAAM,CACTN,QAAQ,GACRO,MAAM,IALG,E,qDA8BJ,IAAD,OACN,OACG,yBAAKpB,UAAU,aACV,kBAAC,EAAD,MACA,0BAAMuB,SAAUC,KAAKR,cAClB,2BAAOS,KAAK,OAAOC,SAAUF,KAAKd,iBAAkBK,MAAOS,KAAKL,MAAMN,QAASb,UAAU,cAIzFwB,KAAKL,MAAMC,MAAMO,KAAI,SAACC,EAAMpB,GAAP,OAClB,kBAAC,EAAD,CAAOqB,IAAKrB,EAAIH,OAAQuB,EAAMrB,aAAc,EAAKA,uB,GAzCjDuB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e305443.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n function Title() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\"> Escribir Notas <span aria-label=\"emoji\" role=\"img\">ðŸ”¥</span> </h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Title\r\n","import React from 'react'\r\n\r\nfunction Tasks(props) {\r\n    return (\r\n        \r\n        <div className=\"task-container\">\r\n            <h3 className=\"task\">{props.valuee}</h3>\r\n            <div className=\"button-container\">\r\n               <button\r\n                  onClick={() => {props.handleDelete(props.id)}}\r\n                  className=\"delete-button\" >\r\n                  X\r\n              </button>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default Tasks\r\n","import React from 'react';\n\nimport './App.css';\nimport Title from './components/title'\nimport Tasks from './components/tasks'\n\nclass App extends React.Component{\n  constructor(){\n    super()\n\n    this.state={\n      newTask:'',\n      tasks:[]\n    }\n  }\n  handleTaskChange=(e) =>{\n    this.setState({\n      newTask:e.target.value\n    })\n  }\n  handleSubmit=(e) =>{\n    e.preventDefault();\n    let newTasks = this.state.tasks;\n    newTasks.push(this.state.newTask)\n    this.setState({\n      newTask: \"\",\n      tasks: newTasks\n    })\n  }\n  handleDelete = (id) => {\n    let newTasks = this.state.tasks;\n    newTasks.splice(id, 1)\n    this.setState({\n      tasks: newTasks,\n    })\n  }\n\n  render(){\n    return (\n       <div className=\"container\">\n            <Title/>\n            <form onSubmit={this.handleSubmit}>\n               <input type=\"text\" onChange={this.handleTaskChange} value={this.state.newTask} className=\"new-task\"/>\n            </form>\n\n            {\n               this.state.tasks.map((task, id) =>\n                  <Tasks key={id} valuee={task} handleDelete={this.handleDelete}/>\n               )\n            }\n       </div>\n       \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}